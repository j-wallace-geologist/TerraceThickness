# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2025-04-28 15:42:52
"""
import arcpy
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *

def ThicknessOfTerraces():  # ThicknessOfTerraces

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Conversion Tools.tbx")
    Surf_units_Simplifed_QtNum_v03 = "Surf_units_Simplifed_QtNum_v03"
    StreamPointAlong_1mile_v01 = "other_layers\\StreamPointAlong_1mile_v01"
    terrace_polygons = "Surf_units_Simplifed_QtNum_v03"
    input_DEM_ideally_1m = arcpy.Raster("DEM+HS\\DEM_1m_12cells_clip5km_v01")

    # Process: Feature To Point: Create Centroids of Terrace Polygons (Feature To Point) (management)
    Polygons_Centroids_inside = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\TyMap_June2024\\TyMap_June2024.gdb\\QtNum_centroids"
    arcpy.management.FeatureToPoint(in_features=Surf_units_Simplifed_QtNum_v03, out_feature_class=Polygons_Centroids_inside, point_location="INSIDE")

    # Process: Spatial Join (Spatial Join) (analysis)
    QtNum_centroids = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\TerraceThicknesses_Sp25.gdb\\QtNum_centroids"
    arcpy.analysis.SpatialJoin(target_features=Polygons_Centroids_inside, join_features=StreamPointAlong_1mile_v01, out_feature_class=QtNum_centroids, field_mapping="Surf_Unit_NAME_jw \"Surf_Unit_NAME_jw\" true true false 255 Text 0 0,First,#,D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\TyMap_June2024\\.\\TyMap_June2024.gdb\\QtNum_centroids,Surf_Unit_NAME_jw,0,254;Surf_Unit_number_jw \"Surf_Unit_number_jw\" true true false 255 Text 0 0,First,#,D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\TyMap_June2024\\.\\TyMap_June2024.gdb\\QtNum_centroids,Surf_Unit_number_jw,0,254;Bottom_Elevation_ft \"Bottom_Elevation_ft\" true true false 2 Short 0 0,First,#,D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\TyMap_June2024\\.\\TyMap_June2024.gdb\\QtNum_centroids,Bottom_Elevation_ft,-1,-1;Top_Elevation_ft \"Top_Elevation_ft\" true true false 2 Short 0 0,First,#,D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\TyMap_June2024\\.\\TyMap_June2024.gdb\\QtNum_centroids,Top_Elevation_ft,-1,-1;Surf_Unit_Description_Short \"Surf_Unit_Description_Short\" true true false 255 Text 0 0,First,#,D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\TyMap_June2024\\.\\TyMap_June2024.gdb\\QtNum_centroids,Surf_Unit_Description_Short,0,254;RiverMile_Allegny \"RiverMile_Allegny\" true true false 2 Short 0 0,First,#,other_layers\\StreamPointAlong_1mile_v01,RiverMile_Allegny,-1,-1;Elev_in_m \"Elev_in_m\" true true false 2 Short 0 0,First,#,other_layers\\StreamPointAlong_1mile_v01,Elev_in_m,-1,-1;Elev_in_ft \"Elev_in_ft\" true true false 4 Float 0 0,First,#,other_layers\\StreamPointAlong_1mile_v01,Elev_in_ft,-1,-1", match_option="CLOSEST", distance_field_name="DistToRiver_m")

    # Process: Zonal Stats: MAXIMUMelevation of terrace segs (2) (Zonal Statistics) (sa)
    output_raster_MAXIMUM_terrace_elevs = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\TerraceThicknesses_Sp25.gdb\\QtNum_MAXIMUM_elevs"
    Zonal_Stats_MAXIMUMelevation_of_terrace_segs_2_ = output_raster_MAXIMUM_terrace_elevs
    output_raster_MAXIMUM_terrace_elevs = arcpy.sa.ZonalStatistics(terrace_polygons, "OBJECTID", input_DEM_ideally_1m, "MAXIMUM", "DATA", "CURRENT_SLICE", 90, "AUTO_DETECT", "ARITHMETIC", 360)
    output_raster_MAXIMUM_terrace_elevs.save(Zonal_Stats_MAXIMUMelevation_of_terrace_segs_2_)


    # Process: Zonal Stats: MINIMUM Elevation of terrace segs (Zonal Statistics) (sa)
    output_raster_MINIMUM_terrace_elevs = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\TerraceThicknesses_Sp25.gdb\\QtNum_MINIMUM_elevs"
    Zonal_Stats_MINIMUM_Elevation_of_terrace_segs = output_raster_MINIMUM_terrace_elevs
    output_raster_MINIMUM_terrace_elevs = arcpy.sa.ZonalStatistics(terrace_polygons, "OBJECTID", input_DEM_ideally_1m, "MINIMUM", "DATA", "CURRENT_SLICE", 90, "AUTO_DETECT", "ARITHMETIC", 360)
    output_raster_MINIMUM_terrace_elevs.save(Zonal_Stats_MINIMUM_Elevation_of_terrace_segs)


    # Process: Raster Calculator (Raster Calculator) (sa)
    QtNum_TerraceMinMaxDIFF = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\TerraceThicknesses_Sp25.gdb\\QtNum_TerraceMinMaxDIFF"
    Raster_Calculator = QtNum_TerraceMinMaxDIFF
    QtNum_TerraceMinMaxDIFF =  output_raster_MAXIMUM_terrace_elevs- output_raster_MINIMUM_terrace_elevs
    QtNum_TerraceMinMaxDIFF.save(Raster_Calculator)


    # Process: Zonal Stats: MEDIAN elevation of terrace segs (Zonal Statistics) (sa)
    output_raster_MEDIAN_terrace_elevs = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\TerraceThicknesses_Sp25.gdb\\QtNum_MEDIAN_elevs"
    Zonal_Stats_MEDIAN_elevation_of_terrace_segs = output_raster_MEDIAN_terrace_elevs
    output_raster_MEDIAN_terrace_elevs = arcpy.sa.ZonalStatistics(terrace_polygons, "OBJECTID", input_DEM_ideally_1m, "MEDIAN", "DATA", "CURRENT_SLICE", 90, "AUTO_DETECT", "ARITHMETIC", 360)
    output_raster_MEDIAN_terrace_elevs.save(Zonal_Stats_MEDIAN_elevation_of_terrace_segs)


    # Process: Zonal Stats: RANGE of elevations of  a single terrace seg (Zonal Statistics) (sa)
    output_raster_RANGE_of_terrace_elevs = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\TerraceThicknesses_Sp25.gdb\\QtNum_RANGE_elevs"
    Zonal_Stats_RANGE_of_elevations_of_a_single_terrace_seg = output_raster_RANGE_of_terrace_elevs
    output_raster_RANGE_of_terrace_elevs = arcpy.sa.ZonalStatistics(terrace_polygons, "OBJECTID", input_DEM_ideally_1m, "RANGE", "DATA", "CURRENT_SLICE", 90, "AUTO_DETECT", "ARITHMETIC", 360)
    output_raster_RANGE_of_terrace_elevs.save(Zonal_Stats_RANGE_of_elevations_of_a_single_terrace_seg)


    # Process: Extract Multi Values to Points (Extract Multi Values to Points) (sa)
    QtNum_centroids_withstats = arcpy.sa.ExtractMultiValuesToPoints(QtNum_centroids, [[QtNum_TerraceMinMaxDIFF, "MinMaxDiff"], [output_raster_MAXIMUM_terrace_elevs, "MAX_terrelev"], [output_raster_MINIMUM_terrace_elevs, "MIN_terrelev"], [output_raster_MEDIAN_terrace_elevs, "MEDIAN_terrelev"], [output_raster_RANGE_of_terrace_elevs, "RANGE_terrelev"]], "NONE")
    .save(Extract_Multi_Values_to_Points)


    # Process: calc field: terr base dist above channel (Calculate Field) (management)
    QtNum_centroids_with_stats = arcpy.management.CalculateField(in_table=QtNum_centroids_withstats, field="TerrBaseDistAboveChannel_m", expression="!MIN_terrelev! - !Elev_in_m!", expression_type="PYTHON3", field_type="SHORT")[0]

    # Process: Table To Excel (Table To Excel) (conversion)
    Output_Excel_File_xls_or_xlsx_ = "D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\QtNum_centroids_TableToExcel.xlsx"
    arcpy.conversion.TableToExcel(Input_Table=[QtNum_centroids_with_stats], Output_Excel_File=Output_Excel_File_xls_or_xlsx_)

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\LongProfileMaps_v01.gdb", workspace="D:\\jfw22_thesis_work\\23-24_LongProfileMaps\\LongProfileMaps_v01\\LongProfileMaps_v01.gdb"):
        ThicknessOfTerraces()
